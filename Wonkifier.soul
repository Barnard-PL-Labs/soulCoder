
graph Wonkifier [[main]]
{

    input stream float<2> in;
    output stream float<2> out;


    input
    {
        mixer.mix            [[ name:"Dry Wet Mix", min: 0, max: 100, init: 0, unit: "%", step: 0.1 ]];
        formants.vType       [[ min: 0,    max: 2,   init:  0,   name: "Vowel Type", text: "Manual|LFO|Envelop"]];
        formants.sType        [[ name:"Vowel Sound", min: 0, max: 2, init: 0, text: "u-a|a-i|o-e" ]];
        formants.vowel       [[ name:"Vowel", min: 0, max: 100, init: 50, unit: "%", step: 1 ]];
        formants.intensity   [[ name:"Intensity", min: 1, max: 25, init: 15, step: 1 ]];
        formants.rateTempoIn     [[ name: "Rate (Tempo)", min: 0, max: 14, init: 0, text: "1/64|1/32|1/16T|1/16|1/16D|1/8T|1/8|1/8D|1/4|1/4D|1/2|1/1|2/1|4/1|8/1"]];
    }

    input event
    {
        float rateHzIn   [[ min: 0.1,  max: 20,  init:  0,  name: "LFO Rate",  unit: "hz",  step: 0.1 ]];
        float depthIn    [[ min: 1,    max: 15,  init:  0,  name: "Mod Depth", unit: "ms",  step: 0.1 ]];
    }

    let
    {
        formants = Formants;
        mixer = Mixer;
        gain1 = soul::gain::FixedGain (float<2>, 0.80f);
        gain2 = soul::gain::FixedGain (float<2>, 0.80f);

        chorus = StereoChorus(100000, 30);
        lfo = soul::oscillators::lfo::Processor (0, 1, 15.0f, 10.0f);

        dcFilter = OutputFilter(-2.0f);

        gainMatch = GainMatch();
    }

    connection
    {
        //chorus parameter
        rateHzIn -> lfo.rateHzIn;
        depthIn -> lfo.depthIn;
        lfo.out -> chorus.lfoValue;


        //audio connection
        in -> gain1 -> mixer.in1;
        in -> gain2 -> chorus.audioIn;
        chorus.audioOut -> formants.in;
        formants.out -> dcFilter.audioIn;
        dcFilter.audioOut -> mixer.in2;

        //mixer.out -> out;

        in -> gainMatch.audioIn1;
        mixer.out -> gainMatch.audioIn2;
        gainMatch.audioOut -> out;

    }
}

// referenced SOUL/example
// Remove DC from the output, apply some gain reduction
processor OutputFilter(float reduction)
{
    input stream float<2>  audioIn;
    output stream float<2> audioOut;

    void run()
    {
        let gain = soul::dBtoGain (reduction);

        float<2> previousIn, previousOut;

        loop
        {
            let y = audioIn - previousIn + 0.997f * previousOut;
            previousIn = audioIn;
            previousOut = y;

            audioOut << gain * y;
            advance();
        }
    }
}
