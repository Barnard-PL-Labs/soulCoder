
graph Wonkifier  [[main]]
{

    input stream float<2> in;
    output stream float<2> out;


    input
    {
        mixer.mix            [[ name:"Dry Wet Mix", min: 0, max: 100, init: 0, unit: "%", step: 0.1 ]];
        formants.vowel       [[ name:"Vowel", min: 0, max: 100, init: 50, unit: "%", step: 1 ]];
        formants.intensity   [[ name:"Intensity", min: 1, max: 25, init: 15, step: 1 ]];
        formants.type        [[ name:"Type", min: 0, max: 2, init: 0, text: "u-a|a-i|o-e" ]];

    }




    input event
    {
        float rateHzIn1   [[ min: 0.1,  max: 100,  init:  10,  name: "LFO 1 Rate",  unit: "hz",  step: 0.1 ]];
        float depthIn1    [[ min: 1,    max: 100,  init:  15,  name: "Mod Depth 1", unit: "ms",  step: 1 ]];
        float rateTempoIn  [[ name: "Rate (Tempo)", min: 0, max: 14, init: 0, text: "1/64|1/32|1/16T|1/16|1/16D|1/8T|1/8|1/8D|1/4|1/4D|1/2|1/1|2/1|4/1|8/1"]];
    }

    input osc.shapeIn;
    input osc.positionIn;
    input osc.transportStateIn;
    input osc.rateModeIn;
    input osc.syncIn;
    input osc.polarityIn;


    input event
    {
        float rateHzIn   [[ min: 0.1,  max: 20,  init:  10,  name: "LFO 2 Rate",  unit: "hz",  step: 0.1 ]];
        float depthIn    [[ min: 1,    max: 30,  init:  15,  name: "Mod Depth 2", unit: "ms",  step: 1 ]];
        float stereoOn   [[ min: 0,    max: 1,   init:  0,   name: "Stereo Chorus Off/On", text: "Off|On"]];
    }


    let delay2 = Delay2(100000);
    namespace LFO = soul::oscillators::lfo;
    let osc = LFO::Processor (LFO::Shape::triangle, LFO::Polarity::unipolar, 1., 10.);
    let tempoRateMapper = TempoRateMapper;






    let
    {
        formants = Formants;
        mixer = Mixer;
        gain = soul::gain::FixedGain (float<2>, 0.80f);


        delay = Delay(100000, 30);
        lfo = soul::oscillators::lfo::Processor (0, 1, 15.0f, 10.0f);
    }

    connection
    {
        rateHzIn -> lfo.rateHzIn;
        depthIn -> lfo.depthIn;
        stereoOn -> delay.stereoOn;
        lfo.out -> delay.lfoValue;
    }


    connection
    {
        rateHzIn1 -> osc.rateHzIn;
        depthIn1 -> osc.depthIn;
        osc.out -> delay2.oscValue;
        rateTempoIn  -> tempoRateMapper.rateTempoIn;
        tempoRateMapper.out  -> osc.rateTempoIn;
        //in -> delay.in;
        //delay.out->out;
    }



    connection
    {
        in -> gain -> mixer.in1;
        in -> formants.in;


        formants.out -> mixer.in2;



        mixer.out -> delay.audioIn;
        mixer.out -> delay2.in;

        delay2.out -> delay.audioIn;

        delay.audioOut -> out;


    }



}



















// comment
