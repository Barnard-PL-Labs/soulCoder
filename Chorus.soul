graph TopLevel [[main]]
{
    input stream float audioIn;
    output stream float audioOut;
    input event
    {
        float rateHzIn   [[ min: 0.1,  max: 20,  init:  10,  name: "LFO Rate",  unit: "hz",  step: 0.1 ]];
        float depthIn    [[ min: 1,    max: 30,  init:  15,  name: "Mod Depth", unit: "ms",  step: 1 ]];
    }

    let delay = Delay(100000, 30);
    let lfo = soul::oscillators::lfo::Processor (0, 1, 15.0f, 10.0f);

    connection
    {
        rateHzIn -> lfo.rateHzIn;
        depthIn -> lfo.depthIn;
        lfo.out -> delay.lfoValue;
        audioIn -> delay.audioIn;
        delay.audioOut -> audioOut;
    }
}

processor Delay (const int maxDelayLength, const int delayCenter)
{
    input  stream float audioIn;
    output stream float audioOut;
    input  stream float lfoValue; 

    float[maxDelayLength] buffer;
    wrap<maxDelayLength> readPos, writePos;

    void run()
    {
        loop
        {
            let delaySamples = max (1, int (processor.frequency * ((delayCenter + (lfoValue * 100)) / 1000.0f)));
            readPos = wrap<maxDelayLength> (writePos - delaySamples);
            buffer[writePos] = audioIn;
            audioOut << (buffer[readPos] + audioIn) / 2;

            ++readPos;
            ++writePos;

            advance();
        }
    }
}
